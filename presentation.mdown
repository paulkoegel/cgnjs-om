class: title-slide

# React & Om

## [Cologne.js - 2014-10-14](http://colognejs.de/talks/#2014-10-14)

.with-small-margin-bottom[
##### Paul Wittmann
]

.small[
[@wakkahari](https://twitter.com/wakkahari) &mdash; <paul@railslove.com>
]
<br>
.extra-small[
**Abstract**  
Although Facebook's React only plays the part of "V" in JavaScript MVC, it is making huge waves. Its virtual DOM offers a tremendous simplification of view rendering along with significant performance benefits. This talk will show how React's virtual DOM works, as well as introduce Om, a ClojureScript interface for React. By harnessing immutable persistent data structures, Om offers even faster performance than React. Thanks to its global app state, implementing undo becomes trivial.]

???
+ JavaScript, Ruby & Clojure at Railslove
+ academic background: philosophy & English lit

---

class: background-cover
background-image: url(images/react_logo.png)

???

JS MVC from Facebook

---

class: background-cover
background-image: url(images/om_logo.png)

???
ClojureScript interface for React

---

.with-small-margins[
###### Overview
]
# Two _Simple_<br> Ideas for JS MVC
1. **Virtual DOM** (React)
2. **Immutable** persistent data structures (Om)

???
concepts and **ideas**

---

# Proviso
+ about **ideas**
+ not a tutorial
+ not actually about **performance**

---

# React & Om
+ Not focussed on delivering the best possible performance
+ aiming for **simple solutions** with reasonable performance out of the box.

???
Re: performance

---

### Better performance through simplicity

.big[
"making an entire family of common and tedious hand optimization techniques _obsolete_"
]
.small[
  David Nolen. ["The Future of JavaScript MVC Frameworks"](https://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs)
]

---

.centered.small-image[
![Rich Hickey](images/rich_hickey.jpg)
]

.with-small-margins[
# What is _simple_?
]

.short[
+ "What matters for simplicity is that there's **no interleaving**." ([Rich Hickey](https://twitter.com/richhickey))
+ **simple ≠ easy**, esp. not familiar
+ .red[**DANGER**]: mistake easy for simple
+ &#10142; Rich Hickey's Rails Conf 2012 keynote: ["Simplicity matters"](https://www.youtube.com/watch?v=rI8tNMsozo0)
]

???
Rich: key witness
+ **No interleaving**: piece of code with one concern or several concerns and ideas intertwined?
+ simple is not necessarily **easy** (what is near us / at hand / familiar)
+ French is easy and familiar to French children - doesn't mean it's simple.
+ Virtual DOM is **unfamiliar**, but still simple.
+ DANGER: mistake `npm install hairball` is easy and familiar but doesn't mean the installed component is simple

---

background-image: url(images/react_logo_transparent.png)

# React

+ "A JavaScript Library for Building User Interfaces"
+ the **V** in JS MVC  
  .small[("and a bit of the controller as well")]
+ usually used alongside Backbone, Angular, Ember

---

.with-small-margins[
# React
]

+ released in May 2013
+ developed by Facebook
+ drives parts of Facebook, all of Instagram
+ Github's Atom editor: [better performance through React](http://blog.atom.io/2014/07/02/moving-atom-to-react.html)
+ Ember team is planning to steal some ideas (&#10142; [React vs. Ember](https://docs.google.com/presentation/d/1afMLTCpRxhJpurQ97VBHCZkLbR1TEsRnd3yyxuSQ5YY/preview))

???
Github's Atom editor switched to React to improve rendering performance; source: [http://blog.atom.io/2014/07/02/moving-atom-to-react.html](http://blog.atom.io/2014/07/02/moving-atom-to-react.html)

---
 
.with-small-margins[
### David Nolen's First impression of React
]

.large[
"I totally wrote it off. I was like, “This is not something I’m ever going to use.” But [...] a good friend [...] was like, _“[...] you really should look at how it works because it’s like the way that game developers do **game engines**.”_  
Then **Pete Hunt** [...] gave a great talk about the design. And I sort of got an epiphany."
]
<br>
.small[
David Nolen. [http://javascriptjabber.com/107-jsj-clojurescript-om-with-david-nolen](http://javascriptjabber.com/107-jsj-clojurescript-om-with-david-nolen)
]

---

background-image: url(images/doom3.png)
.with-small-margins[
### Doom 3 Rendering Engine overlaid with Corresponding Parts of React's Architecture
]

---

.with-small-margins[
### Separation of Concerns & JSX
# React's Main Building Blocks: Components
]

```javascript
var Comment = React.createClass({
  render: function() {
    var rawMarkup = converter.makeHtml(this.props.children.toString());
    return (
      <div className="comment">
        <h2 className="commentAuthor">{this.props.author}</h2>
        <span dangerouslySetInnerHTML={{__html: rawMarkup}} />
      </div>
    );
  }
});
```

???
How come people ignore React?
+ components unify templates and views
+ JSX is weird

---

<br>
.big[
"If you're going to hate on React for some reason, make it something other than JSX"]
.small[
Alex Matchneer (@machty), Ember.js core team
[https://docs.google.com/presentation/d/1afMLTCpRxhJpurQ97VBHCZkLbR1TEsRnd3yyxuSQ5YY/preview?usp=sharing&sle=true#slide=id.g380053cce_1205](https://docs.google.com/presentation/d/1afMLTCpRxhJpurQ97VBHCZkLbR1TEsRnd3yyxuSQ5YY/preview?usp=sharing&sle=true#slide=id.g380053cce_1205)
]

---

.with-small-margins[
### Components
]

+ merge template and view into one - usually considered a _poor_ separation of concerns. Pete Hunt claims it's not  
  &#10142; ["React: Rethinking best practices"](http://2013.jsconf.eu/speakers/pete-hunt-react-rethinking-best-practices.html)
+ [no templating language](https://facebook.github.io/react/blog/2013/06/05/why-react.html).blue[*], you can harness the full power of JS to build your templates - Clojure people like this very much

.small[
.blue[*] JSX is just a very thin layer on top of JS functions that generate DOM elements
]

---

.with-small-margins[
  # React's Killer Feature:<br> Virtual DOM
]

+ &#10142; ["React: Secrets of the Virtual DOM"](https://www.youtube.com/watch?v=1h2G20A-AvY) &ndash; [Pete Hunt](https://twitter.com/floydophone)
+ &#10142; ["React's Architecture"](https://www.youtube.com/watch?v=eCf5CquV_Bw) &ndash; [Christopher Chedeau](https://twitter.com/vjeux)

---

+ normal JS MVC:  
  data &#10142; template .red[**&#10142;**] DOM

--

.red[
  ## BOTTLENECK! Reflows and -paints.
]

--

+ React:  
  data &#10142; template &#10142; virtual DOM .blue[**&#10142;**] DOM

.blue[
  **Same bottleneck, less traffic**
]

---

.with-small-margins[
  ## Virtual DOM in Action
]

.small[
left: React, right: Backbone
]

![monkeys](images/monkeys_100_delay.gif)

.small[
  source: [http://joelburget.com/backbone-to-react](http://joelburget.com/backbone-to-react)
]

---

.short[
+ **Backbone:** onkeyup` the entire view gets rerendered although only the text at the beginning is changed &#10142; the mathematical formulas are flickering
+ **React:** the same view (= React component) gets rerendered, but only to the **virtual DOM**, which is then **diffed** with the previous virtual DOM. From the diff, a minimal changeset is built and applied to the actual DOM - the actual DOM elements containing the formulas are never touched, even though they're part of the React component whose data gets updated `onkeyup`.
]

---

# Virtual DOM 
+ as we just saw: **precise DOM updates**  
  only the DOM nodes that actually need to be updated get updated, putting less traffic on the bottleneck of JS MVC rendering performance
+ furthermore: **re-render everything** - huge conceptual simplification

---

<br>
.big[
  "React's key design decision is to make the API .blue[**seem**] like it re-renders the whole app on every update."
]
.small[
  [https://facebook.github.io/react/docs/reconciliation.html](https://facebook.github.io/react/docs/reconciliation.html)
]
<br>
.small[
.blue["seem"] because it re-renders only the entire virtual DOM - the actual DOM receives only a minimal changeset (after diffing)
]

---

# Re-render everything on any data update

.big[
  updated data  
  &#10142; .blue[**all** templates]  
  &#10142; virtual DOM (JS object)  
  .red[&#10142;] DOM  
]

???
Easy to reason about JS MVC.
on **ANY** update of the data

---

# Re-render everything on any data update
+ you don't have to worry about whether bindings between models and multiple views work
+ very easy to reason about

---

# But how can this ever work?

---

# This is how it works:

.big[
  updated data  
  &#10142; all templates  
  &#10142; virtual DOM  
  &#10142; .blue[**DIFF**]  
  .green[**minimal changes &#10142;**] DOM  
]

???
doesn't actually rerender everything (unchanging bits remain in the DOM - the DOM is stateful, after all) - see demo and cf. Vjeux talk

---

# Diffing
+ virtual DOM is a normal JS object
+ "with powerful heuristics we managed to turn a O(n³) problem into a O(n) one."
  .small[
    [https://facebook.github.io/react/docs/reconciliation.html](https://facebook.github.io/react/docs/reconciliation.html)
  ]
  &#10142; ["React's Architecture"](https://www.youtube.com/watch?v=eCf5CquV_Bw) &ndash; [Christopher Chedeau](https://twitter.com/vjeux)


???
Diff would take 17min for 10.000 DOM nodes on 1Ghz machine with O(n³) (cf. Vjeux talk).

---

.small-image.centered[
![Mr. Aleph](images/mraleph.jpg)
]
    
"often devs still approach performance of JS code as if they are riding a **horse cart** but the horse had long been replaced with **fusion reactor**"  

.small[
  &mdash; Vyacheslav Egorov (@mraleph) <a href="https://twitter.com/mraleph/status/411549064787152896">December 13, 2013</a>  
  v8 compiler engineer
]

---

.with-small-margins[
# Om
### "A ClojureScript .blue[interface] to Facebook's React"
]

.short[
+ Om is built on top of React &ndash; to use Om you always have to load React
+ Om is written in ClojureScript &ndash; you cannot use Om without ClojureScript
+ Blog post introducing Om:  
  ["The Future of JavaScript MVC Frameworks"](https://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs) &ndash; [David Nolen](https://twiter.com/swannodette), December 2013
]

---

# More than an interface / Differences to React
+ **immutable** data structures
+ **global** app state (like a database)

---

# "A .blue[ClojureScript] interface to Facebook's React"

+ Clojure on JavaScript engines
+ instead of the JVM (Clojure)
+ ~= Clojure

---

.with-small-margins[
## Clojure & ClojureScript
]
.short[
+ 2007 / 2011
+ LISP &ndash; with weird syntax like `(+ 1 1)` .red[(biggest hurdle)]
+ **immutable persistent data structures**
+ embraces simplicity
+ dynamic
+ functional .red[(not object-oriented - another hurdle)]
+ pragmatic
]

???
LISP: biggest hurdle

---

.width-100[
![elegant weapons](images/elegant_weapons.png)]

---

# ClojureScript
+ -vs- CoffeeScript: Clojure semantics
+ larger compilation: mostly to remodel Clojure data structures
+ integrated with Google .blue[Closure] Tools

.small[
despite the similar name: other than this, Google Closure has **nothing** to do with Clojure]

---

### JavaScript: e.g. Mutable Arrays

.big[
```javascript
var x = ['foo', 'bar'];

x.push('baz'); // modifies the array

x
=> ['foo', 'bar', 'baz']
```
]

---

.with-small-margins[
### ClojureScript: Immutable Lists
]

.big[
```clojure
(def my_vec '( 1 2 3 4 ))
=> #'user/my_vec

;; remove first element
;; add `11` to front
(conj (pop my_vec) 11)
=> (11 2 3 4)

my_vec
=> (1 2 3 4)
```
]

---

.with-small-margins[
### Immutable Data Structures Beyond what I'm going to show you
]

.short[
+ "change your life" (Rich Hickey)
+ main reason most Clojurians say they love the language: "I came for the concurrency, and stayed for the immutability"
+ are easy to reason about &amp; vastly simplify your app
  &#10142; ["Simplicity matters"](https://www.youtube.com/watch?v=rI8tNMsozo0)
+ implementation details e.g. here:  
  &#10142; ["Understanding Clojure's Persistent Vectors, pt. 1"](http://hypirion.com/musings/understanding-persistent-vector-pt-1)  
  &#10142; ["Functional Vectors, Maps and Sets in Julia"](https://github.com/strangeloop/StrangeLoop2013/blob/master/slides/sessions/Allaun-FunctionalVectorsMapsAndSetsInJulia.pdf) - [Zach Allaun](https://twitter.com/riotonthebay)
]

---

# Immutable .blue[Persistent] Data Structures
+ persistence: has nothing to do with databases here

---

class: slide-without-slide-number
background-image: url(images/linked_list.png)

.small.below-slide-content[
source: ["Functional Vectors, Maps and Sets in Julia"](https://github.com/strangeloop/StrangeLoop2013/blob/master/slides/sessions/Allaun-FunctionalVectorsMapsAndSetsInJulia.pdf) - [Zach Allaun](https://twitter.com/riotonthebay)
]

???

+ Works like git, only small diffes are kept to create second vector.
+ important for Om

---

.with-small-margins[
## Immutable .blue[Persistent] Data Structures
]
+ work like git &ndash; `x` and `z` refer to the same shared sublist: `(2 3 4)`
+ since Clojure functions return only modified **copies** of their arguments, persistence helps creating these copies with **better performance**

---

.with-small-margins[
## Immutable .blue[Persistent] Data Structures
]

+ immutable data structures are slower than mutable ones, but thanks to clever implementations Clojure(Script)'s are usually only negligibly slower
+ when RAM was a _lot_ scarcer we had no alternative but to mutate our data structures
+ &#10142; Clojure's [transients](http://clojure.org/transients)

---

.with-small-margins[
# Om
]

.short[
+ React: virtual DOM is a JavaScript object
+ Om: virtual DOM is an immutable persistent data structure
+ Om: even **faster diffing** of the virtual DOM:  
  thanks to CLojureScript's immutable data structures, Om's modified diffing algorithm doesn't have to traverse the entire virtual DOM. Reference equality checks at the top of a branch suffice to see whether anything's changed below - this is not possible with JS's mutable data structures.
]

---

.with-small-margins[
### TodoMVC Rendering Performance
]

![React -vs- Om](images/react_vs_om.png)
.small[source: [http://vuejs.org/perf](http://vuejs.org/perf)]

+ You will find JS MVCs faster than Om - aiming for **simplicity** with reasonable performance. So far even generally superior performance :)

---

# Om: undo

+ Goya:  
  [https://jackschaedler.github.io/goya](https://jackschaedler.github.io/goya)

---

.with-small-margins[
# Om: undo
]

+ entire UI is built from one data structure - **global app state**
+ keep a **history** of app states
+ **stuctural sharing** (persistent data structures) ensures low memory consumption
+ feed **flipped arguments** to React's diffing algorithm to update the DOM

???
Undo - schwer aus 2 Gründen:

1. Historie von App-States nachzuhalten frisst schnell viel Speicher
2. ohne virtual DOM schreibt man teils voneinander abhängende imperative DOM-Änderungen deren Reihenfolge nicht ohne weiteres umkehrbar ist

---

## Undo in 15 Lines of Code

```clojure
(def app-history (atom [@app-state]))

(add-watch app-state :history
  (fn [_ _ _ n]
    (when-not (= (last @app-history) n)
      (swap! app-history conj n))
    (set! (.-innerHTML (.getElementById js/document "message"))
      (let [c (count @app-history)]
        (str c " Saved " (pluralize c "State"))))))

(aset js/window "undo"
  (fn [e]
    (when (> (count @app-history) 1)
      (swap! app-history pop)
      (reset! app-state (last @app-history)))))
```

.small[
source: ["Time Travel"](https://swannodette.github.io/2013/12/31/time-travel/) &ndash; [David Nolen](https://twitter.com/swannodette)
]

---

.with-small-margins[
# Summary
]

.short[
1. **Virtual DOM** (React)
   - precise
   - re-render everything
2. **immutable** persistent data structures (Om)
   - even faster diffing
   - I've only shown you a small part of why they're awesome - digg deeper and check out their **further benefits**!
]

???
+ aim was to whet your appetite
+ introduced new concepts
+ Om is an experiment - go play with it!

---

.with-small-margins[
### Bonus: Live ClojureScript REPL Demo in Lighttable
]

.extra-short[
+ [Lighttable](http://lighttable.com) is an editor developed by [Chris Granger](https://twitter.com/ibdknox)
]

<iframe width="560" height="315" src="//www.youtube.com/embed/C0Mf_KIWX38" frameborder="0" allowfullscreen></iframe>
<!-- _ fix markdown highlighting -->

.extra-short[
+ .small[Chris does super awesome crazy stuff: Thoughtbot podcast: ["Thinking Outside the Loop - Programming inside a database](http://podcasts.thoughtbot.com/giantrobots/111)]
]
---

.with-small-margins[
### Coda
## I built a Card Game with Om
]

<br>

<iframe width="100%" src="//www.youtube.com/embed/r0u1IBr1apU" frameborder="0" allowfullscreen></iframe>

[http://github.com/paulwittmann/omingard](http://github.com/paulwittmann/omingard)

---

.with-small-margins[
### Coda
# Two Perspectives
]

1. Today: React & Om as interesting **"JS MVCs"**
2. My personal motivation:  
   Om as a **gate opener into Clojure**  
   &#10142; slides: [Alien Technology: Ideas from the Clojureverse](https://github.com/paulwittmann/alien-technology-9elements)  
   &#10142; .green[upcoming Railslove **blog post**] - stay tuned [@wakkahari](https://twitter.com/wakkahari) &amp; [railslove.com/stories](http://railslove.com/stories)

???
1.: today
2.: alien technology, upcoming blog post

---

.with-small-margins[
### Simplicity Links
]

.extra-short[
+ ["Simplicity matters"](https://www.youtube.com/watch?v=rI8tNMsozo0) &ndash; [Rich Hickey](https://twitter.com/richhickey)
+ ["Clojure: Programming with Hand Tools"](https://www.youtube.com/watch?v=ShEez0JkOFw) &ndash; Tim Ewald
+ ["Rich Hickey’s Greatest Hits"](http://thechangelog.com/rich-hickeys-greatest-hits) - The Change Log
]

.with-small-margin-bottom[
### React Links
]

.extra-short[
+ ["Removing User Interface Complexity, or Why React is Awesome"](http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome) &ndash; [James Long](https://twitter.com/jlongster)
+ ["React vs. Ember"](https://docs.google.com/presentation/d/1afMLTCpRxhJpurQ97VBHCZkLbR1TEsRnd3yyxuSQ5YY/preview) &ndash; [Alex Matchneer](https://twitter.com/machty)
+ ["React: Rethinking best practices"](http://2013.jsconf.eu/speakers/pete-hunt-react-rethinking-best-practices.html) &ndash; [Pete Hunt](https://twitter.com/floydophone)
+ ["React: Secrets of the Virtual DOM"](https://www.youtube.com/watch?v=1h2G20A-AvY) &ndash; [Pete Hunt](https://twitter.com/floydophone)
+ ["React's Architecture"](https://www.youtube.com/watch?v=eCf5CquV_Bw) &ndash; [Christopher Chedeau](https://twitter.com/vjeux)
+ ["React's diff algorithm"](http://calendar.perfplanet.com/2013/diff) &ndash; [Christopher Chedeau](https://twitter.com/vjeux)
]

---

.with-small-margin-bottom[
### Om & ClojureScript Links
]

.extra-short[
+ [JavaScript Jabber with David Nolen](http://javascriptjabber.com/107-jsj-clojurescript-om-with-david-nolen)
+ ["Immutability, interactivity & JavaScript"](https://www.youtube.com/watch?v=mS264h8KGwk) &ndash; [David Nolen]((https://twitter.com/swannodette). FutureJS 2014.
+ the excellent [Om Tutorial](https://github.com/swannodette/om/wiki/Basic-Tutorial)
+ [Light Table ClojureScript Tutorial](https://github.com/swannodette/lt-cljs-tutorial)
  .extra-small[shows you how to set up an editor for easy Clojure development - found this way easier than installing vim or emacs plugins - wouldn't consider using Lighttable as my main editor, but it's great to get started in Clojure land]
+ ["The Future of JavaScript MVC Frameworks"](https://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs) &ndash; [David Nolen](https://twitter.com/swannodette)
+ ["Time Travel"](https://swannodette.github.io/2013/12/31/time-travel/) &ndash; [David Nolen](https://twitter.com/swannodette)
]

---

.with-small-margin-bottom[
### More Om & ClojureScript Links
]

.extra-short[
+ [Goya](https://jackschaedler.github.io/goya) &ndash; Om undo demo app developed by an Ableton engineer
+ ["Decomposing web app development"](http://tonsky.me/blog/decomposing-web-app-development/) &ndash; [Nikita Prokopov](https://twitter.com/tonsky); about Datascript: mini-Datomic in JavaScript
]

.with-small-margin-bottom[
### Functional Programming Links
]

.extra-short[
+ ["Object Oriented Programming is an expensive disaster which must end"](http://www.smashcompany.com/technology/object-oriented-programming-is-an-expensive-disaster-which-must-end) - [Lawrence Krubner](https://twitter.com/krubner)
]
