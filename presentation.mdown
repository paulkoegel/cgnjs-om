<!-- React and Om -->
<!--  -->
<!-- Although Facebook's React only plays the part of "V" in JavaScript MVC, it is making huge waves. Its virtual DOM offers a tremendous simplification of view rendering along with significant performance benefits. This talk will show how React's virtual DOM works, as well as introduce Om, a ClojureScript interface for React. By harnessing immutable persistent data structures, Om offers even faster performance than React. Thanks to its global app state, implementing undo becomes trivial. -->
<!--  -->

# React & Om

### Paul Wittmann 
+ [@wakkahari](https://twitter.com/wakkahari)
+ paul@railslove.com

???
+ JavaScript, Ruby & Clojure at Railslove
+ academic background: philosophy & English lit

---

class: background-cover
background-image: url(images/react_logo.png)

???

JS MVC from Facebook

---

class: background-cover
background-image: url(images/om_logo.png)

???
ClojureScript interface for React

---

.with-small-margins[
###### Overview
]
# Two _Simple_<br> Ideas for JS MVC
1. **Virtual DOM** (React)
2. **Immutable** persistent data structures (Om)

???
concepts and **ideas**

---

# Proviso
+ about **ideas**
+ not a tutorial
+ not actually about **performance**

---

# React & Om
+ Not focussed on delivering the best possible performance
+ aiming for **simple solutions** with reasonable performance out of the box.

???
Re: performance

---

### Better performance through simplicity

.big[
"making an entire family of common and tedious hand optimization techniques _obsolete_"
]
.small[
  David Nolen. ["The Future of JavaScript MVC Frameworks"](https://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs)
]

---

.centered.small-image[
![Rich Hickey](images/rich_hickey.jpg)
]

.with-small-margins[
# What is _simple_?
]

.short[
+ "What matters for simplicity is that there's **no interleaving**." (Rich Hickey)
+ **simple ≠ easy**, esp. not familiar
+ .red[**DANGER**]: mistake easy for simple
]

???
Rich: key witness
+ **No interleaving**: piece of code with one concern or several concerns and ideas intertwined?
+ simple is not necessarily **easy** (what is near us / at hand / familiar)
+ French is easy and familiar to French children - doesn't mean it's simple.
+ Virtual DOM is **unfamiliar**, but still simple.
+ DANGER: mistake `npm install hairball` is easy and familiar but doesn't mean the installed component is simple

---

background-image: url(images/react_logo_transparent.png)

# React

+ "A JavaScript Library for Building User Interfaces"
+ the **V** in JS MVC
+ usually used alongside Backbone, Angular, Ember

---

.with-small-margins[
# React
]

+ released in May 2013
+ developed by Facebook
+ drives parts of Facebook, all of Instagram
+ Atom editor
+ Ember team is planning to steal some ideas

???
Github's Atom editor switched to React to improve rendering performance; source: [http://blog.atom.io/2014/07/02/moving-atom-to-react.html](http://blog.atom.io/2014/07/02/moving-atom-to-react.html)

---

.large[
"I totally wrote it off. I was like, “This is not something I’m ever going to use.” But [...] a good friend [...] was like, _“[...] you really should look at how it works because it’s like the way that game developers do **game engines**.”_  
Then **Pete Hunt** [...] gave a great talk about the design. And I sort of got an epiphany."
]
<br>
.small[
David Nolen. [http://javascriptjabber.com/107-jsj-clojurescript-om-with-david-nolen](http://javascriptjabber.com/107-jsj-clojurescript-om-with-david-nolen)
]

---

background-image: url(images/doom3.png)

---

.with-small-margins[
### Separation of Concerns & JSX
# React's Main Building Blocks: Components
]

```javascript
var Comment = React.createClass({
  render: function() {
    var rawMarkup = converter.makeHtml(this.props.children.toString());
    return (
      <div className="comment">
        <h2 className="commentAuthor">{this.props.author}</h2>
        <span dangerouslySetInnerHTML={{__html: rawMarkup}} />
      </div>
    );
  }
});
```

???
How come people ignore React?

---

.big[
"If you're going to hate on React for some reason, make it something other than JSX"]
.small[
Alex Matchneer (@machty), Ember.js core team
[https://docs.google.com/presentation/d/1afMLTCpRxhJpurQ97VBHCZkLbR1TEsRnd3yyxuSQ5YY/preview?usp=sharing&sle=true#slide=id.g380053cce_1205](https://docs.google.com/presentation/d/1afMLTCpRxhJpurQ97VBHCZkLbR1TEsRnd3yyxuSQ5YY/preview?usp=sharing&sle=true#slide=id.g380053cce_1205)
]

---

.with-small-margins[
  # Killer Feature:<br> Virtual DOM
]

---

+ normal JS MVC:  
  data -> template .red[**->**] DOM

--

.red[
  ## BOTTLENECK!
]

--

+ React:  
  data -> template -> virtual DOM .red[**->**] DOM

.blue[
  **Same bottleneck, less traffic**
]

---

.with-small-margins[
  ## Virtual DOM in Action
]

.small[
left: React, right: Backbone
]

![monkeys](images/monkeys_100_delay.gif)

.small[
  source: [http://joelburget.com/backbone-to-react](http://joelburget.com/backbone-to-react)
]

---

# Virtual DOM 
+ re-render **everything**
+ precise DOM updates

---

.big[
  "React's key design decision is to make the API .blue[**seem**] like it re-renders the whole app on every update."
]
.small[
  [https://facebook.github.io/react/docs/reconciliation.html](https://facebook.github.io/react/docs/reconciliation.html)
]

---

# Re-render everything all the time

.big[
  data  
  -> **all** templates  
  -> virtual DOM (JS object)  
  .red[->] DOM  
]

???
Easy to reason about JS MVC.
on **ANY** update of the data

---

# How can this ever work?

---

# How does it work?

.big[
  data  
  -> **all** templates  
  -> virtual DOM  
  -> .blue[**DIFF**]  
  .green[**minimal changes ->**] DOM  
]

???
doesn't actually rerender everything (unchanging bits remain in the DOM - the DOM is stateful, after all) - see demo and cf. Vjeux talk

---

# Diffing
+ virtual DOM is a normal JS object

.big[
"with powerful heuristics we managed to turn a O(n³) problem into a O(n) one."]

.small[
  [https://facebook.github.io/react/docs/reconciliation.html](https://facebook.github.io/react/docs/reconciliation.html)
]

???
Diff would take 17min for 10.000 DOM nodes on 1Ghz machine with O(n³) (cf. Vjeux talk).

---

.small-image.centered[
![Mr. Aleph](images/mraleph.jpg)
]
    
"often devs still approach performance of JS code as if they are riding a **horse cart** but the horse had long been replaced with **fusion reactor**"  

.small[
  &mdash; Vyacheslav Egorov (@mraleph) <a href="https://twitter.com/mraleph/status/411549064787152896">December 13, 2013</a></blockquote>
]

???
v8 compiler engineer

---

# Om
## "A ClojureScript .blue[interface] to Facebook's React"

---

# More than an interface
+ immutable data structures
+ global app state (like a database)

---

# "A .blue[ClojureScript] interface to Facebook's React"

+ Clojure on JavaScript engines
+ instead of the JVM (Clojure)
+ ~= Clojure

---

.with-small-margins[
## Clojure & ClojureScript
]
.short[
+ 2007 / 2011
+ LISP `(+ 1 1)`
+ **immutable persistent data structures**
+ embraces simplicity
+ dynamic
+ functional
+ pragmatic
]

???
LISP: biggest hurdle

---

.width-100[
![elegant weapons](images/elegant_weapons.png)]

---

# ClojureScript
+ -vs- CoffeeScript: Clojure semantics
+ larger compilation: mostly to remodel Clojure data structures
+ integrated with Google .blue[Closure] Tools

.small[
other than this, Google Closure has **nothing** to do with Clojure]

---

# JS: e.g. mutable Arrays

.large[
```javascript
var x = ['foo', 'bar'];

x.push('baz'); // modifies the array.

x
=> ['foo', 'bar', 'baz']
```
]

---

# CLJS: Immutable list

```clojure
(def my_vec '( 1 2 3 4 ))
=> #'user/my_vec

(conj (pop my_vec) 11) ;; remove first el, add 11 to front
=> (11 2 3 4)

my_vec
=> (1 2 3 4)
```

---

background-image: url(images/linked_list.png)

???

+ Works like git, only small diffes are kept to create second vector.
+ important for Om

---

# Om

.short[
+ even faster diffing:  
  reference equality checks
+ **TodoMVC** Benchmark:  
  Om: 913 ms  
  Backbone: 2,167 ms  

  Edge case:  
  Om: 105 ms  
  Backbone: 4,200 ms
]

---

# Om: undo

+ Goya:  
  [https://jackschaedler.github.io/goya](https://jackschaedler.github.io/goya)

---

.with-small-margins[
# Om: undo
]

+ entire UI is built from one data structure - **global app state**
+ keep a **history** of app states
+ **stuctural sharing** (persistent data structures) ensures low memory consumption
+ feed flipped arguments to React's diffing algorithm

???
Undo - schwer aus 2 Gründen:

1. Historie von App-States nachzuhalten frisst schnell viel Speicher
2. ohne virtual DOM schreibt man teils voneinander abhängende imperative DOM-Änderungen deren Reihenfolge nicht ohne weiteres umkehrbar ist

---

### Undo in 15 LoC

```clojure
(def app-history (atom [@app-state]))

(add-watch app-state :history
  (fn [_ _ _ n]
    (when-not (= (last @app-history) n)
      (swap! app-history conj n))
    (set! (.-innerHTML (.getElementById js/document "message"))
      (let [c (count @app-history)]
        (str c " Saved " (pluralize c "State"))))))

(aset js/window "undo"
  (fn [e]
    (when (> (count @app-history) 1)
      (swap! app-history pop)
      (reset! app-state (last @app-history)))))
```

---

# Summary

1. **Virtual DOM** (React)
   - precise
   - re-render everything
2. **immutable** persistent data structures (Om)

???
+ aim was to whet your appetite
+ introduced new concepts
+ Om is an experiment - go play with it!

---

.with-small-margins[
# Coda: Omingard
]

<br>

<!-- <iframe width="100%" height="450" src="http://localhost:8888"></iframe> -->

<iframe width="100%" src="//www.youtube.com/embed/r0u1IBr1apU" frameborder="0" allowfullscreen></iframe>

+ [http://github.com/paulwittmann/omingard](http://github.com/paulwittmann/omingard)

---

# Coda: Paths
.big[
1. React & Om as interesting **JS MVCs**
2. Om as a gate opener into **Clojure**  
   -> .blue[upcoming Railslove blog post]
]

???
1.: today
2.: alien technology, upcoming blog post

---

# Slides
http://tinyurl.com/om-cgnjs
