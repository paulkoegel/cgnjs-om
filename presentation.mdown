<!-- React and Om -->
<!--  -->
<!-- Although Facebook's React only plays the part of "V" in JavaScript MVC, it is making huge waves. Its virtual DOM offers a tremendous simplification of view rendering along with significant performance benefits. This talk will show how React's virtual DOM works, as well as introduce Om, a ClojureScript interface for React. By harnessing immutable persistent data structures, Om offers even faster performance than React. Thanks to its global app state, implementing undo becomes trivial. -->
<!--  -->

# React & Om

### Paul Wittmann 
+ [@wakkahari](https://twitter.com/wakkahari)
+ paul@railslove.com

???
+ JavaScript, Ruby & Clojure at Railslove
+ academic background: philosophy & English lit

---

class: background-cover
background-image: url(images/react_logo.png)

???

JS MVC from Facebook

---

class: background-cover
background-image: url(images/om_logo.png)

???
ClojureScript interface for React

---

.with-small-margins[
###### Overview
]
# Two _Simple_<br> Ideas for JS MVC
1. **Virtual DOM** (React)
2. **Immutable** persistent data structures (Om)

???
concepts and **ideas**

---

# Proviso
+ about **ideas**
+ not a tutorial
+ not actually about performance

---

# React & Om
+ Not focussed on delivering the best possible performance
+ aiming for **simple solutions** with reasonable performance out of the box.

---

### Better performance through simplicity

.big[
"making an entire family of common and tedious hand optimization techniques _obsolete_"
]
.small[
  David Nolen. ["The Future of JavaScript MVC Frameworks"](https://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs)
]

---

.centered.small-image[
![Rich Hickey](images/rich_hickey.jpg)
]

.with-small-margins[
# What is _simple_?
]

.short[
+ "What matters for simplicity is that there's **no interleaving**." (Rich Hickey)
+ simple ≠ easy, esp. not **familiar**
+ .red[**DANGER**]: mistake easy for simple
]

???
Rich: key witness
+ **No interleaving**: piece of code with one concern or several concerns and ideas intertwined?
+ simple is not necessarily **easy** (what is near us / at hand / familiar)
+ Virtual DOM is **unfamiliar**, but still simple.
+ DANGER: mistake`npm install hairball` is easy and familiar but doesn't mean the installed component is simple
+ French is easy and familiar to French children - doesn't mean it's simple.

---

background-image: url(images/react_logo_transparent.png)

# React

+ "A JavaScript Library for Building User Interfaces"
+ the **V** in JS MVC

---

# React

+ released in May 2013
+ developed by Facebook
+ drives parts of Facebook, all of Instagram
+ Atom editor

???
Github's Atom editor switched to React to improve rendering performance; source: [http://blog.atom.io/2014/07/02/moving-atom-to-react.html](http://blog.atom.io/2014/07/02/moving-atom-to-react.html)

---

background-image: url(images/using_react.png)

---

.large[
"I totally wrote it off. I was like, “This is not something I’m ever going to use.” But [...] a good friend [...] was like, _“[...] you really should look at how it works because it’s like the way that game developers do **game engines**.”_  
Then **Pete Hunt** [...] gave a great talk about the design. And I sort of got an epiphany."
]
<br>
.small[
David Nolen. [http://javascriptjabber.com/107-jsj-clojurescript-om-with-david-nolen](http://javascriptjabber.com/107-jsj-clojurescript-om-with-david-nolen)
]

---

background-image: url(images/doom3.png)

---

.with-small-margins[
### Separation of Concerns & JSX
# React's Main Building Blocks: Components
]

```javascript
var Comment = React.createClass({
  render: function() {
    var rawMarkup = converter.makeHtml(this.props.children.toString());
    return (
      <div className="comment">
        <h2 className="commentAuthor">{this.props.author}</h2>
        <span dangerouslySetInnerHTML={{__html: rawMarkup}} />
      </div>
    );
  }
});
```

???
How come people ignore React?

---

.big[
"If you're going to hate on React for some reason, make it something other than JSX"]
.small[
Alex Matchneer (@machty), Ember.js core team
[https://docs.google.com/presentation/d/1afMLTCpRxhJpurQ97VBHCZkLbR1TEsRnd3yyxuSQ5YY/preview?usp=sharing&sle=true#slide=id.g380053cce_1205](https://docs.google.com/presentation/d/1afMLTCpRxhJpurQ97VBHCZkLbR1TEsRnd3yyxuSQ5YY/preview?usp=sharing&sle=true#slide=id.g380053cce_1205)
]

---

.with-small-margins[
  # Killer Feature:<br> Virtual DOM
]

---

+ normal JS MVC:  
  data -> template .red[**->**] DOM

--

.red[
  ## BOTTLENECK!
]

--

+ React:  
  data -> template -> virtual DOM .red[**->**] DOM

.blue[
  **Same bottleneck, less traffic**
]

---

.with-small-margins[
  ## Virtual DOM in Action
]

.small[
left: React, right: Backbone
]

![monkeys](images/monkeys_100_delay.gif)

.small[
  source: [http://joelburget.com/backbone-to-react](http://joelburget.com/backbone-to-react)
]

---

# Virtual DOM 
+ re-render **everything**
+ precise DOM updates

---

.big[
  "React's key design decision is to make the API .blue[**seem**] like it re-renders the whole app on every update."
]
.small[
  [https://facebook.github.io/react/docs/reconciliation.html](https://facebook.github.io/react/docs/reconciliation.html)
]

---

# Re-render everything all the time

.big[
  data  
  -> **all** templates  
  -> virtual DOM (JS object)  
  .red[->] DOM  
]

???
Easy to reason about JS MVC.
on **ANY** update of the data

---

# How can this ever work?

---

# How does it work?

.big[
  data  
  -> **all** templates  
  -> virtual DOM  
  -> .blue[**DIFF**]  
  .green[**minimal changes ->**] DOM  
]

???
doesn't actually rerender everything (unchanging bits remain in the DOM - the DOM is stateful, after all) - see demo and cf. Vjeux talk

---

# Diffing
+ virtual DOM is a normal JS object

.big[
"with powerful heuristics we managed to turn a O(n³) problem into a O(n) one."]

.small[
  [https://facebook.github.io/react/docs/reconciliation.html](https://facebook.github.io/react/docs/reconciliation.html)
]

???
Diff would take 17min for 10.000 DOM nodes on 1Ghz machine with O(n³) (cf. Vjeux talk).

---

.small-image.centered[
![Mr. Aleph](images/mraleph.jpg)
]
    
"often devs still approach performance of JS code as if they are riding a **horse cart** but the horse had long been replaced with **fusion reactor**"  

.small[
  &mdash; Vyacheslav Egorov (@mraleph) <a href="https://twitter.com/mraleph/status/411549064787152896">December 13, 2013</a></blockquote>
]

???
v8 compiler engineer

---

# Om
## "A ClojureScript .blue[interface] to Facebook's React"

---

# More than an interface
+ immutable data structures
+ global app state (like a database)

---

# "A .blue[ClojureScript] interface to Facebook's React"

+ Clojure on JavaScript engines
+ instead of the JVM (Clojure)
+ ~= Clojure

---

.with-small-margins[
## Clojure & ClojureScript
]
.short[
+ 2007 / 2011
+ LISP `(+ 1 1)`
+ **immutable persistent data structures**
+ embraces simplicity
+ dynamic
+ functional
+ pragmatic
]

???
LISP: biggest hurdle

---

.width-100[
![elegant weapons](images/elegant_weapons.png)]

---

# ClojureScript
+ -vs- CoffeeScript: Clojure semantics
+ larger compilation: mostly to remodel Clojure data structures
+ integrated with Google .blue[Closure] Tools

.small[
other than this, Google Closure has **nothing** to do with Clojure]

---

# JS: e.g. mutable Arrays

.large[
```javascript
var x = ['foo', 'bar'];

x.push('baz'); // modifies the array.

x
=> ['foo', 'bar', 'baz']
```
]

---

# CLJS: Immutable list

```clojure
(def my_vec '( 1 2 3 4 ))
=> #'user/my_vec

(conj (pop my_vec) 11) ;; remove first el, add 11 to front
=> (11 2 3 4)

my_vec
=> (1 2 3 4)
```

---

background-image: url(images/linked_list.png)

???

+ Works like git, only small diffes are kept to create second vector.
+ important for Om

---

# Om

+ even faster diffing:  
  reference equality checks

---

# Om: undo

+ Goya:  
  [https://jackschaedler.github.io/goya](https://jackschaedler.github.io/goya)

---

.with-small-margins[
# Om: undo
]

+ entire UI is built from one data structure - **global app state**
+ keep a **history** of app states
+ **stuctural sharing** (persistent data structures) ensures low memory consumption
+ feed flipped arguments to React's diffing algorithm

???
Undo - schwer aus 2 Gründen:

1. Historie von App-States nachzuhalten frisst schnell viel Speicher
2. ohne virtual DOM schreibt man teils voneinander abhängende imperative DOM-Änderungen deren Reihenfolge nicht ohne weiteres umkehrbar ist

---

### Undo in 15 LoC

```clojure
(def app-history (atom [@app-state]))

(add-watch app-state :history
  (fn [_ _ _ n]
    (when-not (= (last @app-history) n)
      (swap! app-history conj n))
    (set! (.-innerHTML (.getElementById js/document "message"))
      (let [c (count @app-history)]
        (str c " Saved " (pluralize c "State"))))))

(aset js/window "undo"
  (fn [e]
    (when (> (count @app-history) 1)
      (swap! app-history pop)
      (reset! app-state (last @app-history)))))
```

---

"It's interesting people think there is more code in react ... we've found the opposite after several ember -> react rewrites."
- Ryan Florence (@ryanflorence)
https://twitter.com/ryanflorence/status/506851469056684032


Christopher Chedeau (@vjeux): "React's Architecture". OSCON 2014. [https://www.youtube.com/watch?v=eCf5CquV_Bw](https://www.youtube.com/watch?v=eCf5CquV_Bw).

---

# Diffing
"with powerful heuristics we managed to turn a O(n³) problem into a O(n) one."
.small-close[
  [https://facebook.github.io/react/docs/reconciliation.html](https://facebook.github.io/react/docs/reconciliation.html)
]

---

Problem:
get/set (oder observe): wir wissen dass sich bestimmte Daten verändert haben, woher weiß ich jetzt was ich am DOM ändern muss?
Backbone: verschiedene Views subscriben auf Änderungen an bestimmten Models, werden dann neu gerendert.
Problem: ganze View wird neu gerendert, obwohl vllt. nur ein Teil davon im DOM aktualisiert werden müsste (DOM-Änderungen sind aber DER Flaschenhals in einer JS MVC App - reflow/-paint etc.).
Ember: auch getter/setter; Vergleich mit React: https://docs.google.com/presentation/d/1afMLTCpRxhJpurQ97VBHCZkLbR1TEsRnd3yyxuSQ5YY/preview?usp=sharing&sle=true#slide=id.p
Angular: 



JSX
Components

http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome
Pete Hunt: React: Rethinking best practices: http://2013.jsconf.eu/speakers/pete-hunt-react-rethinking-best-practices.html

# Om

Benchmark mit Todo MVC

Om: 913 ms
Backbone: 2,167 ms

Grenzfall:
Om: 105 ms
Backbone: 4,200 ms

Optimizing AngularJS: 1200ms to 35ms - http://blog.scalyr.com/2013/10/31/angularjs-1200ms-to-35ms



http://www.petehunt.net/react/tastejs/benchmark.html

VanillaJS/TodoMVC/Adding200Items/Sync : 1005.9922700000006 ms
VanillaJS/TodoMVC/Adding200Items/Async : 600.2125379999998 ms
VanillaJS/TodoMVC/CompletingAllItems/Sync : 1339.285769 ms
VanillaJS/TodoMVC/CompletingAllItems/Async : 224.06729799999994 ms
VanillaJS/TodoMVC/DeletingAllItems/Sync : 1173.3380480000014 ms
VanillaJS/TodoMVC/DeletingAllItems/Async : 186.68930400000136 ms
VanillaJS/TodoMVC : 4529.585227000003 ms
EmberJS/TodoMVC/Adding200Items/Sync : 4397.025068000001 ms
EmberJS/TodoMVC/Adding200Items/Async : 320.1463530000037 ms
EmberJS/TodoMVC/CompletingAllItems/Sync : 2522.9012550000007 ms
EmberJS/TodoMVC/CompletingAllItems/Async : 208.90673600000082 ms
EmberJS/TodoMVC/DeletingItems/Sync : 4729.087371000001 ms
EmberJS/TodoMVC/DeletingItems/Async : 243.08295300000464 ms
EmberJS/TodoMVC : 12421.149736000012 ms
BackboneJS/TodoMVC/Adding200Items/Sync : 619.1512220000004 ms
BackboneJS/TodoMVC/Adding200Items/Async : 159.91802800000005 ms
BackboneJS/TodoMVC/CompletingAllItems/Sync : 2008.4504489999963 ms
BackboneJS/TodoMVC/CompletingAllItems/Async : 184.91508600000452 ms
BackboneJS/TodoMVC/DeletingAllItems/Sync : 1676.8106610000032 ms
BackboneJS/TodoMVC/DeletingAllItems/Async : 275.1769459999996 ms
BackboneJS/TodoMVC : 4924.422392000004 ms
jQuery/TodoMVC/Adding200Items/Sync : 1689.9794529999926 ms
jQuery/TodoMVC/Adding200Items/Async : 849.2226680000022 ms
jQuery/TodoMVC/CompletingAllItems/Sync : 4486.867192999998 ms
jQuery/TodoMVC/CompletingAllItems/Async : 1754.3686890000026 ms
jQuery/TodoMVC/DeletingAllItems/Sync : 23.403052999994543 ms
jQuery/TodoMVC/DeletingAllItems/Async : 31.705121999999392 ms
jQuery/TodoMVC : 8835.54617799999 ms
AngularJS/TodoMVC/Adding200Items/Sync : 1918.720408999994 ms
AngularJS/TodoMVC/Adding200Items/Async : 145.79874399999972 ms
AngularJS/TodoMVC/CompletingAllItems/Sync : 2886.5484670000005 ms
AngularJS/TodoMVC/CompletingAllItems/Async : 337.03211600000213 ms
AngularJS/TodoMVC/DeletingAllItems/Sync : 5192.675345000003 ms
AngularJS/TodoMVC/DeletingAllItems/Async : 3318.0291299999953 ms
AngularJS/TodoMVC : 13798.804210999995 ms
AngularJS-perf/TodoMVC/Adding200Items/Sync : 1885.8736439999993 ms
AngularJS-perf/TodoMVC/Adding200Items/Async : 255.61978100000124 ms
AngularJS-perf/TodoMVC/CompletingAllItems/Sync : 2060.725878999976 ms
AngularJS-perf/TodoMVC/CompletingAllItems/Async : 321.06817499999306 ms
AngularJS-perf/TodoMVC/DeletingAllItems/Sync : 4667.764341000016 ms
AngularJS-perf/TodoMVC/DeletingAllItems/Async : 2552.566282999993 ms
AngularJS-perf/TodoMVC : 11743.618102999979 ms
React/TodoMVC/Adding200Items/Sync : 1503.4219929999963 ms
React/TodoMVC/Adding200Items/Async : 187.70102599999518 ms
React/TodoMVC/CompletingAllItems/Sync : 2406.4689939999953 ms
React/TodoMVC/CompletingAllItems/Async : 195.02263200000743 ms
React/TodoMVC/DeletingAllItems/Sync : 1693.991616000014 ms
React/TodoMVC/DeletingAllItems/Async : 101.71366500000295 ms
React/TodoMVC : 6088.319926000011 ms
Total : 62341.445773000014 ms




The Future of JavaScript MVC Frameworks: http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs

https://github.com/swannodette/mori
https://github.com/facebook/immutable-js
https://github.com/Tvaroh/moreartyjs

# Where does that leave us?
+ put React on your map -> use it as the view layer in your JS MVC for high-performant UIs (has successfully been integrated with Backbone, Angular, and Ember)
+ put ClojureScript on your map
+ put Om and immutable persistent data structures on your map





"There so many new libs coming out for #javascript that are based on things from #clojure or #clojurescript Why can't we just use those?!?"
(https://twitter.com/jakecraige/status/520995917810257920)

"Ok, I've decided it's finally time to learn Clojure. Too many smart people I know are using it. Suggestions for a good place to start?"
- Patrick Dubroy (@dubroy)
https://twitter.com/dubroy/status/391172425150263296

"I should go to clojure conferences even if I don't use Clojure. I see too many smart people going. #ClojureWest"
- James “Jimmy” Long (@jlongster)
https://twitter.com/jlongster/status/313665572976095232


Toxi:
"What I wasn’t quite prepared for were the many doors (of perception and inquiry) Clojure has opened wide in terms of process, thinking & learning about code from outside the boxes of our so beloved, popular languages & frameworks."
(http://www.creativeapplications.net/tutorials/introduction-to-clojure-part-1/)

AST example
http://www.creativeapplications.net/wp-content/uploads/2013/12/hypot.pnga

persistent data structures example:
http://www.creativeapplications.net/wp-content/uploads/2013/04/persistent.png

---

# Summary

1. **Virtual DOM** (React)
   - precise
   - re-render everything
2. **immutable** persistent data structures (Om)

???
+ aim was to whet your appetite
+ introduced new concepts
+ Om is an experiment - go play with it!

---

.with-small-margins[
# Coda: Omingard
]

<br>

<!-- <iframe width="100%" height="450" src="http://localhost:8888"></iframe> -->

<iframe width="100%" src="//www.youtube.com/embed/r0u1IBr1apU" frameborder="0" allowfullscreen></iframe>

+ [http://github.com/paulwittmann/omingard](http://github.com/paulwittmann/omingard)

---

# Coda: Paths
.big[
1. React & Om as interesting **JS MVCs**
2. Om as a gate opener into **Clojure**
]

???
1.: today
2.: alien technology, upcoming blog post

---

# Slides
http://tinyurl.com/om-cgnjs

---

# Links

---

# Further Reading

+ Macros in JavaScript: [http://sweetjs.org](http://sweetjs.org)
+ Reactive programming in JavaScript: [https://github.com/Reactive-Extensions/RxJS](https://github.com/Reactive-Extensions/RxJS) and [http://www.ractivejs.org](http://www.ractivejs.org)


= = = = = = = = = = = = = = = = = = = = = = = = = = = =

Bonus Chapters
==============

# Simplicity

"The art of programming is the art of organizing complexity, of mastering multitude and avoiding its bastard chaos as effectively as possible."
- Dijkstra (1970) "Notes On Structured Programming

"we should do (as wise programmers aware of our limitations) our utmost to shorten the conceptual gap between the static program and the dyervabelsnamic process, to make the correspondence between the program (spread out in text space) and the process (spread out in time) as trivial as possible."
- Dijkstra (1968) "A Case against the GO TO Statement"
-> processes are hard to predict, we need to model these processes as static programs, so we can reason about single snapshots in time.
example:
+ list of online buddies:
+ alice, bob, charles: online via web, Carol: online via mobile.
+ list of imerative changes: alice went offline, bob went offline, steve went online, bob went online, charles is idle, charles is on mobile
+ very hard to keep a process that's evolving over time in your head, but easy to keep in mind how a static snapshot looks like: static JSON -> UI.

solution so far (to turn process into static program): data binding! makes process a little more predictable.
Data binding syncs state in your UI with state in yur data model so you don't have to.
Pete Hunt sees data binding as a polyfill for reactive JavaScript/DOM.

Data binding is a non-trivial abstraction and too leaky to be used by Facebook.
Current data binding isn't simple - what does simple mean!?

"What matters for simplicity is that there's no interleaving" (Rich Hickey)
Piece of code: one concern or several concerns and ideas intertwined?
Simple != familiar
French is familiar to French speakers, doesn't mean it's simple

Most common implementation of data binding:
key-value observation (Ember, Backbone, Cocoa)
observables: values that notify other parts of the system when they change.
computed properties: composed of observables.

Ember:
special language to bind JavaScript objects to the DOM - handlebars; cannot be extended, you're caught in the DSL

![leaky Ember](images/leaky_ember.png)

Company:
  score: ->
    .property('upvotes', 'downvotes')
App:
  topCompanies: ->
    .property('companies')

the companies array isn't changing - the companies inside it are changing:
    .property('companies.@each.upvotes', 'companies.@each.downvotes')
this interleaves knownledge of the data binding abstraction with our app code. you need to know how the data binding works (how companies are ranked to update the list)
have to look at topCompanies to know that it calls companies' score function, then look at that to know that it depends on a company's up and down votes.

Ember user: totalVotes should have been a computed property

-> "Intellectuals solve problems, geniuses prevent them." - Einstein

Better: implicit KVO (Knockout, Meteor)
example: date picker
Enter a date:
<select data-bind="value: month">
  <option value="0">January</option>
  ...
</select>

Date you entered:
<span data-bind="text: formatDate(date())">

JavaScript:
function formatDate(d) {
  return (
    (d.getMonth() + 1) + '/' +
    d.getDate() + '/' +
    d.getFullYear()
  );
}

function DatePickerModel() {
  var currentDate = new Date();
  this.month = ko.observable(currentDate.getMonth());
  this.day =  ..
  this.date = ko.copmuted(function() {
    return new Date(
      this.year(),
      this.month(),
      this.day()
    );

  }, this);
}


# Clojure: functional, LISP, immutable data structures, pragmatic etc.
# core.async
- https://github.com/ubolonton/js-csp
- http://jlongster.com/Taming-the-Asynchronous-Beast-with-CSP-in-JavaScript

---

```
var CommentBox = React.createClass({
  render: function() {
    return (
      <div className="commentBox">
        Hello, world! I am a CommentBox.
      </div>
    );
  }
});
React.renderComponent(
  <CommentBox />,
  document.getElementById('content')
);
```

---

```html
<html>
  <head>
    <title>Hello React</title>
    <script src="http://fb.me/react-0.11.2.js"></script>
    <script src="http://fb.me/JSXTransformer-0.11.2.js"></script>
    <script src="http://code.jquery.com/jquery-1.10.0.min.js"></script>
  </head>
  <body>
    <div id="content"></div>
    <script type="text/jsx">
      /** @jsx React.DOM */
      // The above declaration must remain intact at the top of the script.
      // Your code here
    </script>
  </body>
</html>
```
